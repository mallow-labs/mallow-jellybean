/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getFeeAccountDecoder,
  getFeeAccountEncoder,
  getJellybeanStateDecoder,
  getJellybeanStateEncoder,
  getPrintFeeConfigDecoder,
  getPrintFeeConfigEncoder,
  type FeeAccount,
  type FeeAccountArgs,
  type JellybeanState,
  type JellybeanStateArgs,
  type PrintFeeConfig,
  type PrintFeeConfigArgs,
} from '../types';

export const JELLYBEAN_MACHINE_DISCRIMINATOR = new Uint8Array([
  240, 170, 43, 148, 110, 172, 77, 89,
]);

export function getJellybeanMachineDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    JELLYBEAN_MACHINE_DISCRIMINATOR
  );
}

export type JellybeanMachine = {
  discriminator: ReadonlyUint8Array;
  /** Version of the account. */
  version: number;
  /** Authority address. */
  authority: Address;
  /** Authority address allowed to mint from the jellybean machine. */
  mintAuthority: Address;
  /** Fee accounts for proceeds of each draw */
  feeAccounts: Array<FeeAccount>;
  /** Print fee config */
  printFeeConfig: Option<PrintFeeConfig>;
  /** Total unique items loaded. Up to 255 items. */
  itemsLoaded: number;
  /** Total supply_loaded of all items added. */
  supplyLoaded: bigint;
  /** Number of times items have been redeemed. */
  supplyRedeemed: bigint;
  /** State of the machine. */
  state: JellybeanState;
  /** Uri of off-chain metadata, max length 196 */
  uri: string;
  /** Padding for future use */
  padding: ReadonlyUint8Array;
};

export type JellybeanMachineArgs = {
  /** Version of the account. */
  version: number;
  /** Authority address. */
  authority: Address;
  /** Authority address allowed to mint from the jellybean machine. */
  mintAuthority: Address;
  /** Fee accounts for proceeds of each draw */
  feeAccounts: Array<FeeAccountArgs>;
  /** Print fee config */
  printFeeConfig: OptionOrNullable<PrintFeeConfigArgs>;
  /** Total unique items loaded. Up to 255 items. */
  itemsLoaded: number;
  /** Total supply_loaded of all items added. */
  supplyLoaded: number | bigint;
  /** Number of times items have been redeemed. */
  supplyRedeemed: number | bigint;
  /** State of the machine. */
  state: JellybeanStateArgs;
  /** Uri of off-chain metadata, max length 196 */
  uri: string;
  /** Padding for future use */
  padding: ReadonlyUint8Array;
};

export function getJellybeanMachineEncoder(): Encoder<JellybeanMachineArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU8Encoder()],
      ['authority', getAddressEncoder()],
      ['mintAuthority', getAddressEncoder()],
      ['feeAccounts', getArrayEncoder(getFeeAccountEncoder())],
      ['printFeeConfig', getOptionEncoder(getPrintFeeConfigEncoder())],
      ['itemsLoaded', getU8Encoder()],
      ['supplyLoaded', getU64Encoder()],
      ['supplyRedeemed', getU64Encoder()],
      ['state', getJellybeanStateEncoder()],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['padding', fixEncoderSize(getBytesEncoder(), 320)],
    ]),
    (value) => ({ ...value, discriminator: JELLYBEAN_MACHINE_DISCRIMINATOR })
  );
}

export function getJellybeanMachineDecoder(): Decoder<JellybeanMachine> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU8Decoder()],
    ['authority', getAddressDecoder()],
    ['mintAuthority', getAddressDecoder()],
    ['feeAccounts', getArrayDecoder(getFeeAccountDecoder())],
    ['printFeeConfig', getOptionDecoder(getPrintFeeConfigDecoder())],
    ['itemsLoaded', getU8Decoder()],
    ['supplyLoaded', getU64Decoder()],
    ['supplyRedeemed', getU64Decoder()],
    ['state', getJellybeanStateDecoder()],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['padding', fixDecoderSize(getBytesDecoder(), 320)],
  ]);
}

export function getJellybeanMachineCodec(): Codec<
  JellybeanMachineArgs,
  JellybeanMachine
> {
  return combineCodec(
    getJellybeanMachineEncoder(),
    getJellybeanMachineDecoder()
  );
}

export function decodeJellybeanMachine<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<JellybeanMachine, TAddress>;
export function decodeJellybeanMachine<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<JellybeanMachine, TAddress>;
export function decodeJellybeanMachine<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<JellybeanMachine, TAddress>
  | MaybeAccount<JellybeanMachine, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getJellybeanMachineDecoder()
  );
}

export async function fetchJellybeanMachine<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<JellybeanMachine, TAddress>> {
  const maybeAccount = await fetchMaybeJellybeanMachine(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeJellybeanMachine<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<JellybeanMachine, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeJellybeanMachine(maybeAccount);
}

export async function fetchAllJellybeanMachine(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<JellybeanMachine>[]> {
  const maybeAccounts = await fetchAllMaybeJellybeanMachine(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeJellybeanMachine(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<JellybeanMachine>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeJellybeanMachine(maybeAccount)
  );
}
