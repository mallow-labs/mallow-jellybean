/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { UnclaimedPrizesSeeds, findUnclaimedPrizesPda } from '../pdas';
import {
  getPrizeDecoder,
  getPrizeEncoder,
  type Prize,
  type PrizeArgs,
} from '../types';

export const UNCLAIMED_PRIZES_DISCRIMINATOR = new Uint8Array([
  171, 187, 169, 217, 28, 112, 80, 133,
]);

export function getUnclaimedPrizesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UNCLAIMED_PRIZES_DISCRIMINATOR
  );
}

export type UnclaimedPrizes = {
  discriminator: ReadonlyUint8Array;
  /** Version of the account. */
  version: number;
  /** Pubkey of the JellybeanMachine account. */
  jellybeanMachine: Address;
  /** Pubkey of the buyer who drew items */
  buyer: Address;
  /** Indices of prizes drawn by the buyer */
  prizes: Array<Prize>;
};

export type UnclaimedPrizesArgs = {
  /** Version of the account. */
  version: number;
  /** Pubkey of the JellybeanMachine account. */
  jellybeanMachine: Address;
  /** Pubkey of the buyer who drew items */
  buyer: Address;
  /** Indices of prizes drawn by the buyer */
  prizes: Array<PrizeArgs>;
};

export function getUnclaimedPrizesEncoder(): Encoder<UnclaimedPrizesArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU8Encoder()],
      ['jellybeanMachine', getAddressEncoder()],
      ['buyer', getAddressEncoder()],
      ['prizes', getArrayEncoder(getPrizeEncoder())],
    ]),
    (value) => ({ ...value, discriminator: UNCLAIMED_PRIZES_DISCRIMINATOR })
  );
}

export function getUnclaimedPrizesDecoder(): Decoder<UnclaimedPrizes> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU8Decoder()],
    ['jellybeanMachine', getAddressDecoder()],
    ['buyer', getAddressDecoder()],
    ['prizes', getArrayDecoder(getPrizeDecoder())],
  ]);
}

export function getUnclaimedPrizesCodec(): Codec<
  UnclaimedPrizesArgs,
  UnclaimedPrizes
> {
  return combineCodec(getUnclaimedPrizesEncoder(), getUnclaimedPrizesDecoder());
}

export function decodeUnclaimedPrizes<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UnclaimedPrizes, TAddress>;
export function decodeUnclaimedPrizes<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UnclaimedPrizes, TAddress>;
export function decodeUnclaimedPrizes<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<UnclaimedPrizes, TAddress>
  | MaybeAccount<UnclaimedPrizes, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUnclaimedPrizesDecoder()
  );
}

export async function fetchUnclaimedPrizes<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UnclaimedPrizes, TAddress>> {
  const maybeAccount = await fetchMaybeUnclaimedPrizes(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUnclaimedPrizes<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UnclaimedPrizes, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUnclaimedPrizes(maybeAccount);
}

export async function fetchAllUnclaimedPrizes(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UnclaimedPrizes>[]> {
  const maybeAccounts = await fetchAllMaybeUnclaimedPrizes(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUnclaimedPrizes(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UnclaimedPrizes>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeUnclaimedPrizes(maybeAccount)
  );
}

export async function fetchUnclaimedPrizesFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: UnclaimedPrizesSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<UnclaimedPrizes>> {
  const maybeAccount = await fetchMaybeUnclaimedPrizesFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUnclaimedPrizesFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: UnclaimedPrizesSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<UnclaimedPrizes>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findUnclaimedPrizesPda(seeds, { programAddress });
  return await fetchMaybeUnclaimedPrizes(rpc, address, fetchConfig);
}
