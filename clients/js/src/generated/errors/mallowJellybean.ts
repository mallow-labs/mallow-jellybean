/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { MALLOW_JELLYBEAN_PROGRAM_ADDRESS } from '../programs';

/** InvalidAuthority: The provided authority doesn't match the counter account's authority */
export const MALLOW_JELLYBEAN_ERROR__INVALID_AUTHORITY = 0x1770; // 6000

export type MallowJellybeanError =
  typeof MALLOW_JELLYBEAN_ERROR__INVALID_AUTHORITY;

let mallowJellybeanErrorMessages:
  | Record<MallowJellybeanError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  mallowJellybeanErrorMessages = {
    [MALLOW_JELLYBEAN_ERROR__INVALID_AUTHORITY]: `The provided authority doesn't match the counter account's authority`,
  };
}

export function getMallowJellybeanErrorMessage(
  code: MallowJellybeanError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      mallowJellybeanErrorMessages as Record<MallowJellybeanError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isMallowJellybeanError<
  TProgramErrorCode extends MallowJellybeanError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
    code
  );
}
