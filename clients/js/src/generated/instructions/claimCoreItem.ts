/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  resolveAuthorityPda,
  resolveEventAuthorityPda,
  resolveProgram,
} from '../../hooked';
import { findUnclaimedPrizesPda } from '../pdas';
import { MALLOW_JELLYBEAN_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_CORE_ITEM_DISCRIMINATOR = new Uint8Array([
  128, 125, 241, 133, 118, 242, 177, 175,
]);

export function getClaimCoreItemDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_CORE_ITEM_DISCRIMINATOR
  );
}

export type ClaimCoreItemInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountJellybeanMachine extends string | IAccountMeta<string> = string,
  TAccountAuthorityPda extends string | IAccountMeta<string> = string,
  TAccountBuyer extends string | IAccountMeta<string> = string,
  TAccountUnclaimedPrizes extends string | IAccountMeta<string> = string,
  TAccountAsset extends string | IAccountMeta<string> = string,
  TAccountCollection extends string | IAccountMeta<string> = string,
  TAccountPrintAsset extends string | IAccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | IAccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountJellybeanMachine extends string
        ? WritableAccount<TAccountJellybeanMachine>
        : TAccountJellybeanMachine,
      TAccountAuthorityPda extends string
        ? WritableAccount<TAccountAuthorityPda>
        : TAccountAuthorityPda,
      TAccountBuyer extends string
        ? WritableAccount<TAccountBuyer>
        : TAccountBuyer,
      TAccountUnclaimedPrizes extends string
        ? WritableAccount<TAccountUnclaimedPrizes>
        : TAccountUnclaimedPrizes,
      TAccountAsset extends string
        ? WritableAccount<TAccountAsset>
        : TAccountAsset,
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountPrintAsset extends string
        ? WritableSignerAccount<TAccountPrintAsset> &
            IAccountSignerMeta<TAccountPrintAsset>
        : TAccountPrintAsset,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimCoreItemInstructionData = {
  discriminator: ReadonlyUint8Array;
  index: number;
};

export type ClaimCoreItemInstructionDataArgs = { index: number };

export function getClaimCoreItemInstructionDataEncoder(): Encoder<ClaimCoreItemInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_CORE_ITEM_DISCRIMINATOR })
  );
}

export function getClaimCoreItemInstructionDataDecoder(): Decoder<ClaimCoreItemInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getU16Decoder()],
  ]);
}

export function getClaimCoreItemInstructionDataCodec(): Codec<
  ClaimCoreItemInstructionDataArgs,
  ClaimCoreItemInstructionData
> {
  return combineCodec(
    getClaimCoreItemInstructionDataEncoder(),
    getClaimCoreItemInstructionDataDecoder()
  );
}

export type ClaimCoreItemAsyncInput<
  TAccountPayer extends string = string,
  TAccountJellybeanMachine extends string = string,
  TAccountAuthorityPda extends string = string,
  TAccountBuyer extends string = string,
  TAccountUnclaimedPrizes extends string = string,
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountPrintAsset extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Anyone can settle the sale */
  payer: TransactionSigner<TAccountPayer>;
  /** Jellybean machine account. */
  jellybeanMachine: Address<TAccountJellybeanMachine>;
  authorityPda?: Address<TAccountAuthorityPda>;
  /** buyer of the nft */
  buyer: Address<TAccountBuyer>;
  /** Buyer unclaimed draws account. */
  unclaimedPrizes?: Address<TAccountUnclaimedPrizes>;
  asset?: Address<TAccountAsset>;
  collection?: Address<TAccountCollection>;
  printAsset?: TransactionSigner<TAccountPrintAsset>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program?: Address<TAccountProgram>;
  index: ClaimCoreItemInstructionDataArgs['index'];
};

export async function getClaimCoreItemInstructionAsync<
  TAccountPayer extends string,
  TAccountJellybeanMachine extends string,
  TAccountAuthorityPda extends string,
  TAccountBuyer extends string,
  TAccountUnclaimedPrizes extends string,
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountPrintAsset extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
>(
  input: ClaimCoreItemAsyncInput<
    TAccountPayer,
    TAccountJellybeanMachine,
    TAccountAuthorityPda,
    TAccountBuyer,
    TAccountUnclaimedPrizes,
    TAccountAsset,
    TAccountCollection,
    TAccountPrintAsset,
    TAccountMplCoreProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimCoreItemInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountJellybeanMachine,
    TAccountAuthorityPda,
    TAccountBuyer,
    TAccountUnclaimedPrizes,
    TAccountAsset,
    TAccountCollection,
    TAccountPrintAsset,
    TAccountMplCoreProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MALLOW_JELLYBEAN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    jellybeanMachine: {
      value: input.jellybeanMachine ?? null,
      isWritable: true,
    },
    authorityPda: { value: input.authorityPda ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    unclaimedPrizes: { value: input.unclaimedPrizes ?? null, isWritable: true },
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    printAsset: { value: input.printAsset ?? null, isWritable: true },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.authorityPda.value) {
    accounts.authorityPda = {
      ...accounts.authorityPda,
      ...resolveAuthorityPda(resolverScope),
    };
  }
  if (!accounts.unclaimedPrizes.value) {
    accounts.unclaimedPrizes.value = await findUnclaimedPrizesPda({
      jellybeanMachine: expectAddress(accounts.jellybeanMachine.value),
      buyer: expectAddress(accounts.buyer.value),
    });
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority = {
      ...accounts.eventAuthority,
      ...resolveEventAuthorityPda(resolverScope),
    };
  }
  if (!accounts.program.value) {
    accounts.program = {
      ...accounts.program,
      ...resolveProgram(resolverScope),
    };
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.jellybeanMachine),
      getAccountMeta(accounts.authorityPda),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.unclaimedPrizes),
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.printAsset),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimCoreItemInstructionDataEncoder().encode(
      args as ClaimCoreItemInstructionDataArgs
    ),
  } as ClaimCoreItemInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountJellybeanMachine,
    TAccountAuthorityPda,
    TAccountBuyer,
    TAccountUnclaimedPrizes,
    TAccountAsset,
    TAccountCollection,
    TAccountPrintAsset,
    TAccountMplCoreProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ClaimCoreItemInput<
  TAccountPayer extends string = string,
  TAccountJellybeanMachine extends string = string,
  TAccountAuthorityPda extends string = string,
  TAccountBuyer extends string = string,
  TAccountUnclaimedPrizes extends string = string,
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountPrintAsset extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Anyone can settle the sale */
  payer: TransactionSigner<TAccountPayer>;
  /** Jellybean machine account. */
  jellybeanMachine: Address<TAccountJellybeanMachine>;
  authorityPda?: Address<TAccountAuthorityPda>;
  /** buyer of the nft */
  buyer: Address<TAccountBuyer>;
  /** Buyer unclaimed draws account. */
  unclaimedPrizes: Address<TAccountUnclaimedPrizes>;
  asset?: Address<TAccountAsset>;
  collection?: Address<TAccountCollection>;
  printAsset?: TransactionSigner<TAccountPrintAsset>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program?: Address<TAccountProgram>;
  index: ClaimCoreItemInstructionDataArgs['index'];
};

export function getClaimCoreItemInstruction<
  TAccountPayer extends string,
  TAccountJellybeanMachine extends string,
  TAccountAuthorityPda extends string,
  TAccountBuyer extends string,
  TAccountUnclaimedPrizes extends string,
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountPrintAsset extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
>(
  input: ClaimCoreItemInput<
    TAccountPayer,
    TAccountJellybeanMachine,
    TAccountAuthorityPda,
    TAccountBuyer,
    TAccountUnclaimedPrizes,
    TAccountAsset,
    TAccountCollection,
    TAccountPrintAsset,
    TAccountMplCoreProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimCoreItemInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountJellybeanMachine,
  TAccountAuthorityPda,
  TAccountBuyer,
  TAccountUnclaimedPrizes,
  TAccountAsset,
  TAccountCollection,
  TAccountPrintAsset,
  TAccountMplCoreProgram,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MALLOW_JELLYBEAN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    jellybeanMachine: {
      value: input.jellybeanMachine ?? null,
      isWritable: true,
    },
    authorityPda: { value: input.authorityPda ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    unclaimedPrizes: { value: input.unclaimedPrizes ?? null, isWritable: true },
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    printAsset: { value: input.printAsset ?? null, isWritable: true },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.authorityPda.value) {
    accounts.authorityPda = {
      ...accounts.authorityPda,
      ...resolveAuthorityPda(resolverScope),
    };
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority = {
      ...accounts.eventAuthority,
      ...resolveEventAuthorityPda(resolverScope),
    };
  }
  if (!accounts.program.value) {
    accounts.program = {
      ...accounts.program,
      ...resolveProgram(resolverScope),
    };
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.jellybeanMachine),
      getAccountMeta(accounts.authorityPda),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.unclaimedPrizes),
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.printAsset),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClaimCoreItemInstructionDataEncoder().encode(
      args as ClaimCoreItemInstructionDataArgs
    ),
  } as ClaimCoreItemInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountJellybeanMachine,
    TAccountAuthorityPda,
    TAccountBuyer,
    TAccountUnclaimedPrizes,
    TAccountAsset,
    TAccountCollection,
    TAccountPrintAsset,
    TAccountMplCoreProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedClaimCoreItemInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Anyone can settle the sale */
    payer: TAccountMetas[0];
    /** Jellybean machine account. */
    jellybeanMachine: TAccountMetas[1];
    authorityPda: TAccountMetas[2];
    /** buyer of the nft */
    buyer: TAccountMetas[3];
    /** Buyer unclaimed draws account. */
    unclaimedPrizes: TAccountMetas[4];
    asset?: TAccountMetas[5] | undefined;
    collection?: TAccountMetas[6] | undefined;
    printAsset?: TAccountMetas[7] | undefined;
    mplCoreProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    eventAuthority: TAccountMetas[10];
    program: TAccountMetas[11];
  };
  data: ClaimCoreItemInstructionData;
};

export function parseClaimCoreItemInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimCoreItemInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MALLOW_JELLYBEAN_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      jellybeanMachine: getNextAccount(),
      authorityPda: getNextAccount(),
      buyer: getNextAccount(),
      unclaimedPrizes: getNextAccount(),
      asset: getNextOptionalAccount(),
      collection: getNextOptionalAccount(),
      printAsset: getNextOptionalAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClaimCoreItemInstructionDataDecoder().decode(instruction.data),
  };
}
