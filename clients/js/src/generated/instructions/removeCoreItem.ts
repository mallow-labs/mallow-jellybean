/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { resolveAuthorityPda } from '../../hooked';
import { MALLOW_JELLYBEAN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_CORE_ITEM_DISCRIMINATOR = new Uint8Array([
  146, 20, 197, 215, 49, 62, 130, 92,
]);

export function getRemoveCoreItemDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_CORE_ITEM_DISCRIMINATOR
  );
}

export type RemoveCoreItemInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountJellybeanMachine extends string | IAccountMeta<string> = string,
  TAccountAuthorityPda extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountAsset extends string | IAccountMeta<string> = string,
  TAccountCollection extends string | IAccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | IAccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountJellybeanMachine extends string
        ? WritableAccount<TAccountJellybeanMachine>
        : TAccountJellybeanMachine,
      TAccountAuthorityPda extends string
        ? WritableAccount<TAccountAuthorityPda>
        : TAccountAuthorityPda,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountAsset extends string
        ? WritableAccount<TAccountAsset>
        : TAccountAsset,
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveCoreItemInstructionData = {
  discriminator: ReadonlyUint8Array;
  index: number;
};

export type RemoveCoreItemInstructionDataArgs = { index: number };

export function getRemoveCoreItemInstructionDataEncoder(): Encoder<RemoveCoreItemInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REMOVE_CORE_ITEM_DISCRIMINATOR })
  );
}

export function getRemoveCoreItemInstructionDataDecoder(): Decoder<RemoveCoreItemInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getU32Decoder()],
  ]);
}

export function getRemoveCoreItemInstructionDataCodec(): Codec<
  RemoveCoreItemInstructionDataArgs,
  RemoveCoreItemInstructionData
> {
  return combineCodec(
    getRemoveCoreItemInstructionDataEncoder(),
    getRemoveCoreItemInstructionDataDecoder()
  );
}

export type RemoveCoreItemInput<
  TAccountJellybeanMachine extends string = string,
  TAccountAuthorityPda extends string = string,
  TAccountAuthority extends string = string,
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Gumball Machine account. */
  jellybeanMachine: Address<TAccountJellybeanMachine>;
  authorityPda?: Address<TAccountAuthorityPda>;
  /** Authority of the jellybean machine. */
  authority: TransactionSigner<TAccountAuthority>;
  asset?: Address<TAccountAsset>;
  /** Core asset's collection if it's part of one. */
  collection?: Address<TAccountCollection>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  index: RemoveCoreItemInstructionDataArgs['index'];
};

export function getRemoveCoreItemInstruction<
  TAccountJellybeanMachine extends string,
  TAccountAuthorityPda extends string,
  TAccountAuthority extends string,
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
>(
  input: RemoveCoreItemInput<
    TAccountJellybeanMachine,
    TAccountAuthorityPda,
    TAccountAuthority,
    TAccountAsset,
    TAccountCollection,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveCoreItemInstruction<
  TProgramAddress,
  TAccountJellybeanMachine,
  TAccountAuthorityPda,
  TAccountAuthority,
  TAccountAsset,
  TAccountCollection,
  TAccountMplCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MALLOW_JELLYBEAN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jellybeanMachine: {
      value: input.jellybeanMachine ?? null,
      isWritable: true,
    },
    authorityPda: { value: input.authorityPda ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.authorityPda.value) {
    accounts.authorityPda = {
      ...accounts.authorityPda,
      ...resolveAuthorityPda(resolverScope),
    };
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jellybeanMachine),
      getAccountMeta(accounts.authorityPda),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRemoveCoreItemInstructionDataEncoder().encode(
      args as RemoveCoreItemInstructionDataArgs
    ),
  } as RemoveCoreItemInstruction<
    TProgramAddress,
    TAccountJellybeanMachine,
    TAccountAuthorityPda,
    TAccountAuthority,
    TAccountAsset,
    TAccountCollection,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedRemoveCoreItemInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Gumball Machine account. */
    jellybeanMachine: TAccountMetas[0];
    authorityPda: TAccountMetas[1];
    /** Authority of the jellybean machine. */
    authority: TAccountMetas[2];
    asset?: TAccountMetas[3] | undefined;
    /** Core asset's collection if it's part of one. */
    collection?: TAccountMetas[4] | undefined;
    mplCoreProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: RemoveCoreItemInstructionData;
};

export function parseRemoveCoreItemInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRemoveCoreItemInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MALLOW_JELLYBEAN_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      jellybeanMachine: getNextAccount(),
      authorityPda: getNextAccount(),
      authority: getNextAccount(),
      asset: getNextOptionalAccount(),
      collection: getNextOptionalAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRemoveCoreItemInstructionDataDecoder().decode(instruction.data),
  };
}
