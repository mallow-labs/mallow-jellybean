/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MALLOW_JELLYBEAN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_DISCRIMINATOR = new Uint8Array([
  183, 18, 70, 156, 148, 109, 161, 34,
]);

export function getWithdrawDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WITHDRAW_DISCRIMINATOR);
}

export type WithdrawInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountJellybeanMachine extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountMintAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountJellybeanMachine extends string
        ? WritableAccount<TAccountJellybeanMachine>
        : TAccountJellybeanMachine,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMintAuthority extends string
        ? WritableSignerAccount<TAccountMintAuthority> &
            IAccountSignerMeta<TAccountMintAuthority>
        : TAccountMintAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawInstructionData = { discriminator: ReadonlyUint8Array };

export type WithdrawInstructionDataArgs = {};

export function getWithdrawInstructionDataEncoder(): Encoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: WITHDRAW_DISCRIMINATOR })
  );
}

export function getWithdrawInstructionDataDecoder(): Decoder<WithdrawInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawInstructionDataCodec(): Codec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder()
  );
}

export type WithdrawInput<
  TAccountJellybeanMachine extends string = string,
  TAccountAuthority extends string = string,
  TAccountMintAuthority extends string = string,
> = {
  /** Gumball Machine acccount. */
  jellybeanMachine: Address<TAccountJellybeanMachine>;
  /** Authority of the jellybean machine. */
  authority: TransactionSigner<TAccountAuthority>;
  /** Mint authority of the jellybean machine. */
  mintAuthority: TransactionSigner<TAccountMintAuthority>;
};

export function getWithdrawInstruction<
  TAccountJellybeanMachine extends string,
  TAccountAuthority extends string,
  TAccountMintAuthority extends string,
  TProgramAddress extends Address = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
>(
  input: WithdrawInput<
    TAccountJellybeanMachine,
    TAccountAuthority,
    TAccountMintAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawInstruction<
  TProgramAddress,
  TAccountJellybeanMachine,
  TAccountAuthority,
  TAccountMintAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MALLOW_JELLYBEAN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jellybeanMachine: {
      value: input.jellybeanMachine ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jellybeanMachine),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mintAuthority),
    ],
    programAddress,
    data: getWithdrawInstructionDataEncoder().encode({}),
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountJellybeanMachine,
    TAccountAuthority,
    TAccountMintAuthority
  >;

  return instruction;
}

export type ParsedWithdrawInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Gumball Machine acccount. */
    jellybeanMachine: TAccountMetas[0];
    /** Authority of the jellybean machine. */
    authority: TAccountMetas[1];
    /** Mint authority of the jellybean machine. */
    mintAuthority: TAccountMetas[2];
  };
  data: WithdrawInstructionData;
};

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      jellybeanMachine: getNextAccount(),
      authority: getNextAccount(),
      mintAuthority: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
