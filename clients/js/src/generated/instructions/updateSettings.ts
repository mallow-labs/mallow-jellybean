/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MALLOW_JELLYBEAN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSettingsArgsDecoder,
  getSettingsArgsEncoder,
  type SettingsArgs,
  type SettingsArgsArgs,
} from '../types';

export const UPDATE_SETTINGS_DISCRIMINATOR = new Uint8Array([
  81, 166, 51, 213, 158, 84, 157, 108,
]);

export function getUpdateSettingsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_SETTINGS_DISCRIMINATOR
  );
}

export type UpdateSettingsInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountJellybeanMachine extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountJellybeanMachine extends string
        ? WritableAccount<TAccountJellybeanMachine>
        : TAccountJellybeanMachine,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateSettingsInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: SettingsArgs;
};

export type UpdateSettingsInstructionDataArgs = { args: SettingsArgsArgs };

export function getUpdateSettingsInstructionDataEncoder(): Encoder<UpdateSettingsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['args', getSettingsArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_SETTINGS_DISCRIMINATOR })
  );
}

export function getUpdateSettingsInstructionDataDecoder(): Decoder<UpdateSettingsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['args', getSettingsArgsDecoder()],
  ]);
}

export function getUpdateSettingsInstructionDataCodec(): Codec<
  UpdateSettingsInstructionDataArgs,
  UpdateSettingsInstructionData
> {
  return combineCodec(
    getUpdateSettingsInstructionDataEncoder(),
    getUpdateSettingsInstructionDataDecoder()
  );
}

export type UpdateSettingsInput<
  TAccountJellybeanMachine extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** Gumball machine account. */
  jellybeanMachine: Address<TAccountJellybeanMachine>;
  /** Gumball Machine authority. This is the address that controls the upate of the jellybean machine. */
  authority: TransactionSigner<TAccountAuthority>;
  args: UpdateSettingsInstructionDataArgs['args'];
};

export function getUpdateSettingsInstruction<
  TAccountJellybeanMachine extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
>(
  input: UpdateSettingsInput<TAccountJellybeanMachine, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): UpdateSettingsInstruction<
  TProgramAddress,
  TAccountJellybeanMachine,
  TAccountAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MALLOW_JELLYBEAN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jellybeanMachine: {
      value: input.jellybeanMachine ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jellybeanMachine),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getUpdateSettingsInstructionDataEncoder().encode(
      args as UpdateSettingsInstructionDataArgs
    ),
  } as UpdateSettingsInstruction<
    TProgramAddress,
    TAccountJellybeanMachine,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedUpdateSettingsInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Gumball machine account. */
    jellybeanMachine: TAccountMetas[0];
    /** Gumball Machine authority. This is the address that controls the upate of the jellybean machine. */
    authority: TAccountMetas[1];
  };
  data: UpdateSettingsInstructionData;
};

export function parseUpdateSettingsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateSettingsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      jellybeanMachine: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getUpdateSettingsInstructionDataDecoder().decode(instruction.data),
  };
}
