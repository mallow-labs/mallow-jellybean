/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { resolveAuthorityPda } from '../../hooked';
import { MALLOW_JELLYBEAN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_CORE_ITEM_DISCRIMINATOR = new Uint8Array([
  138, 200, 152, 167, 252, 149, 240, 114,
]);

export function getAddCoreItemDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_CORE_ITEM_DISCRIMINATOR
  );
}

export type AddCoreItemInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountJellybeanMachine extends string | IAccountMeta<string> = string,
  TAccountAuthorityPda extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountAsset extends string | IAccountMeta<string> = string,
  TAccountCollection extends string | IAccountMeta<string> = string,
  TAccountMplCoreProgram extends
    | string
    | IAccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountJellybeanMachine extends string
        ? WritableAccount<TAccountJellybeanMachine>
        : TAccountJellybeanMachine,
      TAccountAuthorityPda extends string
        ? WritableAccount<TAccountAuthorityPda>
        : TAccountAuthorityPda,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAsset extends string
        ? WritableAccount<TAccountAsset>
        : TAccountAsset,
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddCoreItemInstructionData = { discriminator: ReadonlyUint8Array };

export type AddCoreItemInstructionDataArgs = {};

export function getAddCoreItemInstructionDataEncoder(): Encoder<AddCoreItemInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: ADD_CORE_ITEM_DISCRIMINATOR })
  );
}

export function getAddCoreItemInstructionDataDecoder(): Decoder<AddCoreItemInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getAddCoreItemInstructionDataCodec(): Codec<
  AddCoreItemInstructionDataArgs,
  AddCoreItemInstructionData
> {
  return combineCodec(
    getAddCoreItemInstructionDataEncoder(),
    getAddCoreItemInstructionDataDecoder()
  );
}

export type AddCoreItemInstructionExtraArgs = {
  /** Forcing AddCoreItemInstructionExtraArgs to be rendered to fix a bug where resolvedArgs is using an undefined type */
  unused?: OptionOrNullable<boolean>;
};

export type AddCoreItemInput<
  TAccountJellybeanMachine extends string = string,
  TAccountAuthorityPda extends string = string,
  TAccountAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountMplCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Gumball Machine account. */
  jellybeanMachine: Address<TAccountJellybeanMachine>;
  authorityPda?: Address<TAccountAuthorityPda>;
  /** Authority of the jellybean machine. */
  authority: TransactionSigner<TAccountAuthority>;
  /** Payer for account reallocation */
  payer: TransactionSigner<TAccountPayer>;
  asset?: Address<TAccountAsset>;
  /** Core asset's collection if it's part of one. */
  collection?: Address<TAccountCollection>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  unused?: AddCoreItemInstructionExtraArgs['unused'];
};

export function getAddCoreItemInstruction<
  TAccountJellybeanMachine extends string,
  TAccountAuthorityPda extends string,
  TAccountAuthority extends string,
  TAccountPayer extends string,
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountMplCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
>(
  input: AddCoreItemInput<
    TAccountJellybeanMachine,
    TAccountAuthorityPda,
    TAccountAuthority,
    TAccountPayer,
    TAccountAsset,
    TAccountCollection,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddCoreItemInstruction<
  TProgramAddress,
  TAccountJellybeanMachine,
  TAccountAuthorityPda,
  TAccountAuthority,
  TAccountPayer,
  TAccountAsset,
  TAccountCollection,
  TAccountMplCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MALLOW_JELLYBEAN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jellybeanMachine: {
      value: input.jellybeanMachine ?? null,
      isWritable: true,
    },
    authorityPda: { value: input.authorityPda ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.authorityPda.value) {
    accounts.authorityPda = {
      ...accounts.authorityPda,
      ...resolveAuthorityPda(resolverScope),
    };
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!args.unused) {
    args.unused = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jellybeanMachine),
      getAccountMeta(accounts.authorityPda),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.mplCoreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getAddCoreItemInstructionDataEncoder().encode({}),
  } as AddCoreItemInstruction<
    TProgramAddress,
    TAccountJellybeanMachine,
    TAccountAuthorityPda,
    TAccountAuthority,
    TAccountPayer,
    TAccountAsset,
    TAccountCollection,
    TAccountMplCoreProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedAddCoreItemInstruction<
  TProgram extends string = typeof MALLOW_JELLYBEAN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Gumball Machine account. */
    jellybeanMachine: TAccountMetas[0];
    authorityPda: TAccountMetas[1];
    /** Authority of the jellybean machine. */
    authority: TAccountMetas[2];
    /** Payer for account reallocation */
    payer: TAccountMetas[3];
    asset?: TAccountMetas[4] | undefined;
    /** Core asset's collection if it's part of one. */
    collection?: TAccountMetas[5] | undefined;
    mplCoreProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: AddCoreItemInstructionData;
};

export function parseAddCoreItemInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddCoreItemInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MALLOW_JELLYBEAN_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      jellybeanMachine: getNextAccount(),
      authorityPda: getNextAccount(),
      authority: getNextAccount(),
      payer: getNextAccount(),
      asset: getNextOptionalAccount(),
      collection: getNextOptionalAccount(),
      mplCoreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAddCoreItemInstructionDataDecoder().decode(instruction.data),
  };
}
