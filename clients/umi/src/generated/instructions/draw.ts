/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { resolveAuthorityPda } from '../../hooked';
import { findUnclaimedPrizesPda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type DrawInstructionAccounts = {
  /** Jellybean machine account. */
  jellybeanMachine: PublicKey | Pda;
  authorityPda?: PublicKey | Pda;
  /** Jellybean machine mint authority (mint only allowed for the mint_authority). */
  mintAuthority: Signer;
  /** Payer for the transaction and account allocation (rent). */
  payer?: Signer;
  /**
   * NFT account owner.
   *
   */

  buyer: PublicKey | Pda;
  /** Buyer unclaimed draws account. */
  unclaimedPrizes?: PublicKey | Pda;
  /** Payment mint. */
  paymentMint?: PublicKey | Pda;
  /** Token program. */
  tokenProgram?: PublicKey | Pda;
  /** Associated token program. */
  associatedTokenProgram: PublicKey | Pda;
  /** System program. */
  systemProgram?: PublicKey | Pda;
  /** Rent. */
  rent?: PublicKey | Pda;
  /**
   * SlotHashes sysvar cluster data.
   *
   */

  recentSlothashes: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type DrawInstructionData = {
  discriminator: Uint8Array;
  paymentAmount: bigint;
};

export type DrawInstructionDataArgs = { paymentAmount: number | bigint };

export function getDrawInstructionDataSerializer(): Serializer<
  DrawInstructionDataArgs,
  DrawInstructionData
> {
  return mapSerializer<DrawInstructionDataArgs, any, DrawInstructionData>(
    struct<DrawInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['paymentAmount', u64()],
      ],
      { description: 'DrawInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([61, 40, 62, 184, 31, 176, 24, 130]),
    })
  ) as Serializer<DrawInstructionDataArgs, DrawInstructionData>;
}

// Args.
export type DrawInstructionArgs = DrawInstructionDataArgs;

// Instruction.
export function draw(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: DrawInstructionAccounts & DrawInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mallowJellybean',
    'J3LLYcm8V5hJRzCKENRPW3yGdQ6xU8Nie8jr3mU88eqq'
  );

  // Accounts.
  const resolvedAccounts = {
    jellybeanMachine: {
      index: 0,
      isWritable: true as boolean,
      value: input.jellybeanMachine ?? null,
    },
    authorityPda: {
      index: 1,
      isWritable: true as boolean,
      value: input.authorityPda ?? null,
    },
    mintAuthority: {
      index: 2,
      isWritable: false as boolean,
      value: input.mintAuthority ?? null,
    },
    payer: {
      index: 3,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    buyer: {
      index: 4,
      isWritable: false as boolean,
      value: input.buyer ?? null,
    },
    unclaimedPrizes: {
      index: 5,
      isWritable: true as boolean,
      value: input.unclaimedPrizes ?? null,
    },
    paymentMint: {
      index: 6,
      isWritable: true as boolean,
      value: input.paymentMint ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    systemProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    rent: {
      index: 10,
      isWritable: false as boolean,
      value: input.rent ?? null,
    },
    recentSlothashes: {
      index: 11,
      isWritable: false as boolean,
      value: input.recentSlothashes ?? null,
    },
    eventAuthority: {
      index: 12,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 13,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: DrawInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authorityPda.value) {
    resolvedAccounts.authorityPda = {
      ...resolvedAccounts.authorityPda,
      ...resolveAuthorityPda(
        context,
        resolvedAccounts,
        resolvedArgs,
        programId,
        true
      ),
    };
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.unclaimedPrizes.value) {
    resolvedAccounts.unclaimedPrizes.value = findUnclaimedPrizesPda(context, {
      jellybeanMachine: expectPublicKey(
        resolvedAccounts.jellybeanMachine.value
      ),
      buyer: expectPublicKey(resolvedAccounts.buyer.value),
    });
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = publicKey(
      'SysvarRent111111111111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDrawInstructionDataSerializer().serialize(
    resolvedArgs as DrawInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
