/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u16,
} from '@metaplex-foundation/umi/serializers';
import { resolveAuthorityPda } from '../../hooked';
import { findUnclaimedPrizesPda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type ClaimCoreItemInstructionAccounts = {
  /** Anyone can settle the sale */
  payer?: Signer;
  /** Jellybean machine account. */
  jellybeanMachine: PublicKey | Pda;
  authorityPda?: PublicKey | Pda;
  /** buyer of the nft */
  buyer: PublicKey | Pda;
  /** Buyer unclaimed draws account. */
  unclaimedPrizes?: PublicKey | Pda;
  asset?: PublicKey | Pda;
  collection?: PublicKey | Pda;
  printAsset?: PublicKey | Pda;
  mplCoreProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type ClaimCoreItemInstructionData = {
  discriminator: Uint8Array;
  index: number;
};

export type ClaimCoreItemInstructionDataArgs = { index: number };

export function getClaimCoreItemInstructionDataSerializer(): Serializer<
  ClaimCoreItemInstructionDataArgs,
  ClaimCoreItemInstructionData
> {
  return mapSerializer<
    ClaimCoreItemInstructionDataArgs,
    any,
    ClaimCoreItemInstructionData
  >(
    struct<ClaimCoreItemInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['index', u16()],
      ],
      { description: 'ClaimCoreItemInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([128, 125, 241, 133, 118, 242, 177, 175]),
    })
  ) as Serializer<
    ClaimCoreItemInstructionDataArgs,
    ClaimCoreItemInstructionData
  >;
}

// Args.
export type ClaimCoreItemInstructionArgs = ClaimCoreItemInstructionDataArgs;

// Instruction.
export function claimCoreItem(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: ClaimCoreItemInstructionAccounts & ClaimCoreItemInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mallowJellybean',
    'J3LLYcm8V5hJRzCKENRPW3yGdQ6xU8Nie8jr3mU88eqq'
  );

  // Accounts.
  const resolvedAccounts = {
    payer: {
      index: 0,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    jellybeanMachine: {
      index: 1,
      isWritable: true as boolean,
      value: input.jellybeanMachine ?? null,
    },
    authorityPda: {
      index: 2,
      isWritable: true as boolean,
      value: input.authorityPda ?? null,
    },
    buyer: {
      index: 3,
      isWritable: true as boolean,
      value: input.buyer ?? null,
    },
    unclaimedPrizes: {
      index: 4,
      isWritable: true as boolean,
      value: input.unclaimedPrizes ?? null,
    },
    asset: {
      index: 5,
      isWritable: true as boolean,
      value: input.asset ?? null,
    },
    collection: {
      index: 6,
      isWritable: true as boolean,
      value: input.collection ?? null,
    },
    printAsset: {
      index: 7,
      isWritable: true as boolean,
      value: input.printAsset ?? null,
    },
    mplCoreProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.mplCoreProgram ?? null,
    },
    systemProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    eventAuthority: {
      index: 10,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 11,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ClaimCoreItemInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.authorityPda.value) {
    resolvedAccounts.authorityPda = {
      ...resolvedAccounts.authorityPda,
      ...resolveAuthorityPda(
        context,
        resolvedAccounts,
        resolvedArgs,
        programId,
        true
      ),
    };
  }
  if (!resolvedAccounts.unclaimedPrizes.value) {
    resolvedAccounts.unclaimedPrizes.value = findUnclaimedPrizesPda(context, {
      jellybeanMachine: expectPublicKey(
        resolvedAccounts.jellybeanMachine.value
      ),
      buyer: expectPublicKey(resolvedAccounts.buyer.value),
    });
  }
  if (!resolvedAccounts.mplCoreProgram.value) {
    resolvedAccounts.mplCoreProgram.value = context.programs.getPublicKey(
      'mplCore',
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
    );
    resolvedAccounts.mplCoreProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getClaimCoreItemInstructionDataSerializer().serialize(
    resolvedArgs as ClaimCoreItemInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
