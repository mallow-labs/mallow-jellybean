/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { resolveAuthorityPda } from '../../hooked';
import {
  PickPartial,
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type AddCoreItemInstructionAccounts = {
  /** Gumball Machine account. */
  jellybeanMachine: PublicKey | Pda;
  authorityPda?: PublicKey | Pda;
  /** Authority of the jellybean machine. */
  authority?: Signer;
  /** Payer for account reallocation */
  payer?: Signer;
  asset?: PublicKey | Pda;
  /** Core asset's collection if it's part of one. */
  collection?: PublicKey | Pda;
  mplCoreProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type AddCoreItemInstructionData = { discriminator: Uint8Array };

export type AddCoreItemInstructionDataArgs = {};

export function getAddCoreItemInstructionDataSerializer(): Serializer<
  AddCoreItemInstructionDataArgs,
  AddCoreItemInstructionData
> {
  return mapSerializer<
    AddCoreItemInstructionDataArgs,
    any,
    AddCoreItemInstructionData
  >(
    struct<AddCoreItemInstructionData>(
      [['discriminator', bytes({ size: 8 })]],
      { description: 'AddCoreItemInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([138, 200, 152, 167, 252, 149, 240, 114]),
    })
  ) as Serializer<AddCoreItemInstructionDataArgs, AddCoreItemInstructionData>;
}

// Extra Args.
export type AddCoreItemInstructionExtraArgs = {
  /** Forcing AddCoreItemInstructionExtraArgs to be rendered to fix a bug where resolvedArgs is using an undefined type */
  unused?: OptionOrNullable<boolean>;
};

// Args.
export type AddCoreItemInstructionArgs = PickPartial<
  AddCoreItemInstructionExtraArgs,
  'unused'
>;

// Instruction.
export function addCoreItem(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: AddCoreItemInstructionAccounts & AddCoreItemInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mallowJellybean',
    'J3LLYcm8V5hJRzCKENRPW3yGdQ6xU8Nie8jr3mU88eqq'
  );

  // Accounts.
  const resolvedAccounts = {
    jellybeanMachine: {
      index: 0,
      isWritable: true as boolean,
      value: input.jellybeanMachine ?? null,
    },
    authorityPda: {
      index: 1,
      isWritable: true as boolean,
      value: input.authorityPda ?? null,
    },
    authority: {
      index: 2,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    payer: {
      index: 3,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    asset: {
      index: 4,
      isWritable: true as boolean,
      value: input.asset ?? null,
    },
    collection: {
      index: 5,
      isWritable: true as boolean,
      value: input.collection ?? null,
    },
    mplCoreProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.mplCoreProgram ?? null,
    },
    systemProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: AddCoreItemInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authorityPda.value) {
    resolvedAccounts.authorityPda = {
      ...resolvedAccounts.authorityPda,
      ...resolveAuthorityPda(
        context,
        resolvedAccounts,
        resolvedArgs,
        programId,
        true
      ),
    };
  }
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.mplCoreProgram.value) {
    resolvedAccounts.mplCoreProgram.value = context.programs.getPublicKey(
      'mplCore',
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
    );
    resolvedAccounts.mplCoreProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedArgs.unused) {
    resolvedArgs.unused = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getAddCoreItemInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
