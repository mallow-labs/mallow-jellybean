/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { Prize, PrizeArgs, getPrizeSerializer } from '../types';

/** Jellybean machine state and config data. */
export type UnclaimedPrizes = Account<UnclaimedPrizesAccountData>;

export type UnclaimedPrizesAccountData = {
  discriminator: Uint8Array;
  /** Version of the account. */
  version: number;
  /** Pubkey of the JellybeanMachine account. */
  jellybeanMachine: PublicKey;
  /** Pubkey of the buyer who drew items */
  buyer: PublicKey;
  /** Indices of prizes drawn by the buyer */
  prizes: Array<Prize>;
};

export type UnclaimedPrizesAccountDataArgs = {
  /** Version of the account. */
  version: number;
  /** Pubkey of the JellybeanMachine account. */
  jellybeanMachine: PublicKey;
  /** Pubkey of the buyer who drew items */
  buyer: PublicKey;
  /** Indices of prizes drawn by the buyer */
  prizes: Array<PrizeArgs>;
};

export function getUnclaimedPrizesAccountDataSerializer(): Serializer<
  UnclaimedPrizesAccountDataArgs,
  UnclaimedPrizesAccountData
> {
  return mapSerializer<
    UnclaimedPrizesAccountDataArgs,
    any,
    UnclaimedPrizesAccountData
  >(
    struct<UnclaimedPrizesAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['version', u8()],
        ['jellybeanMachine', publicKeySerializer()],
        ['buyer', publicKeySerializer()],
        ['prizes', array(getPrizeSerializer())],
      ],
      { description: 'UnclaimedPrizesAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([171, 187, 169, 217, 28, 112, 80, 133]),
    })
  ) as Serializer<UnclaimedPrizesAccountDataArgs, UnclaimedPrizesAccountData>;
}

export function deserializeUnclaimedPrizes(
  rawAccount: RpcAccount
): UnclaimedPrizes {
  return deserializeAccount(
    rawAccount,
    getUnclaimedPrizesAccountDataSerializer()
  );
}

export async function fetchUnclaimedPrizes(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UnclaimedPrizes> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'UnclaimedPrizes');
  return deserializeUnclaimedPrizes(maybeAccount);
}

export async function safeFetchUnclaimedPrizes(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UnclaimedPrizes | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeUnclaimedPrizes(maybeAccount) : null;
}

export async function fetchAllUnclaimedPrizes(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UnclaimedPrizes[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'UnclaimedPrizes');
    return deserializeUnclaimedPrizes(maybeAccount);
  });
}

export async function safeFetchAllUnclaimedPrizes(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UnclaimedPrizes[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeUnclaimedPrizes(maybeAccount as RpcAccount)
    );
}

export function getUnclaimedPrizesGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mallowJellybean',
    'J3LLYcm8V5hJRzCKENRPW3yGdQ6xU8Nie8jr3mU88eqq'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      version: number;
      jellybeanMachine: PublicKey;
      buyer: PublicKey;
      prizes: Array<PrizeArgs>;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      version: [8, u8()],
      jellybeanMachine: [9, publicKeySerializer()],
      buyer: [41, publicKeySerializer()],
      prizes: [73, array(getPrizeSerializer())],
    })
    .deserializeUsing<UnclaimedPrizes>((account) =>
      deserializeUnclaimedPrizes(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([171, 187, 169, 217, 28, 112, 80, 133])
    );
}

export function findUnclaimedPrizesPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    jellybeanMachine: PublicKey;

    buyer: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mallowJellybean',
    'J3LLYcm8V5hJRzCKENRPW3yGdQ6xU8Nie8jr3mU88eqq'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('unclaimed_prizes'),
    publicKeySerializer().serialize(seeds.jellybeanMachine),
    publicKeySerializer().serialize(seeds.buyer),
  ]);
}

export async function fetchUnclaimedPrizesFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findUnclaimedPrizesPda>[1],
  options?: RpcGetAccountOptions
): Promise<UnclaimedPrizes> {
  return fetchUnclaimedPrizes(
    context,
    findUnclaimedPrizesPda(context, seeds),
    options
  );
}

export async function safeFetchUnclaimedPrizesFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findUnclaimedPrizesPda>[1],
  options?: RpcGetAccountOptions
): Promise<UnclaimedPrizes | null> {
  return safeFetchUnclaimedPrizes(
    context,
    findUnclaimedPrizesPda(context, seeds),
    options
  );
}
