/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  FeeAccount,
  FeeAccountArgs,
  JellybeanState,
  JellybeanStateArgs,
  PrintFeeConfig,
  PrintFeeConfigArgs,
  getFeeAccountSerializer,
  getJellybeanStateSerializer,
  getPrintFeeConfigSerializer,
} from '../types';

/** Jellybean machine state and config data. */
export type JellybeanMachine = Account<JellybeanMachineAccountData>;

export type JellybeanMachineAccountData = {
  discriminator: Uint8Array;
  /** Version of the account. */
  version: number;
  /** Authority address. */
  authority: PublicKey;
  /** Authority address allowed to mint from the jellybean machine. */
  mintAuthority: PublicKey;
  /** Fee accounts for proceeds of each draw */
  feeAccounts: Array<FeeAccount>;
  /** Print fee config */
  printFeeConfig: Option<PrintFeeConfig>;
  /** Total unique items loaded. Up to 255 items. */
  itemsLoaded: number;
  /** Total supply_loaded of all items added. */
  supplyLoaded: bigint;
  /** Number of times items have been redeemed. */
  supplyRedeemed: bigint;
  /** State of the machine. */
  state: JellybeanState;
  /** Uri of off-chain metadata, max length 196 */
  uri: string;
  /** Padding for future use */
  padding: Uint8Array;
};

export type JellybeanMachineAccountDataArgs = {
  /** Version of the account. */
  version: number;
  /** Authority address. */
  authority: PublicKey;
  /** Authority address allowed to mint from the jellybean machine. */
  mintAuthority: PublicKey;
  /** Fee accounts for proceeds of each draw */
  feeAccounts: Array<FeeAccountArgs>;
  /** Print fee config */
  printFeeConfig: OptionOrNullable<PrintFeeConfigArgs>;
  /** Total unique items loaded. Up to 255 items. */
  itemsLoaded: number;
  /** Total supply_loaded of all items added. */
  supplyLoaded: number | bigint;
  /** Number of times items have been redeemed. */
  supplyRedeemed: number | bigint;
  /** State of the machine. */
  state: JellybeanStateArgs;
  /** Uri of off-chain metadata, max length 196 */
  uri: string;
  /** Padding for future use */
  padding: Uint8Array;
};

export function getJellybeanMachineAccountDataSerializer(): Serializer<
  JellybeanMachineAccountDataArgs,
  JellybeanMachineAccountData
> {
  return mapSerializer<
    JellybeanMachineAccountDataArgs,
    any,
    JellybeanMachineAccountData
  >(
    struct<JellybeanMachineAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['version', u8()],
        ['authority', publicKeySerializer()],
        ['mintAuthority', publicKeySerializer()],
        ['feeAccounts', array(getFeeAccountSerializer())],
        ['printFeeConfig', option(getPrintFeeConfigSerializer())],
        ['itemsLoaded', u8()],
        ['supplyLoaded', u64()],
        ['supplyRedeemed', u64()],
        ['state', getJellybeanStateSerializer()],
        ['uri', string()],
        ['padding', bytes({ size: 320 })],
      ],
      { description: 'JellybeanMachineAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([240, 170, 43, 148, 110, 172, 77, 89]),
    })
  ) as Serializer<JellybeanMachineAccountDataArgs, JellybeanMachineAccountData>;
}

export function deserializeJellybeanMachine(
  rawAccount: RpcAccount
): JellybeanMachine {
  return deserializeAccount(
    rawAccount,
    getJellybeanMachineAccountDataSerializer()
  );
}

export async function fetchJellybeanMachine(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<JellybeanMachine> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'JellybeanMachine');
  return deserializeJellybeanMachine(maybeAccount);
}

export async function safeFetchJellybeanMachine(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<JellybeanMachine | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeJellybeanMachine(maybeAccount) : null;
}

export async function fetchAllJellybeanMachine(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<JellybeanMachine[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'JellybeanMachine');
    return deserializeJellybeanMachine(maybeAccount);
  });
}

export async function safeFetchAllJellybeanMachine(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<JellybeanMachine[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeJellybeanMachine(maybeAccount as RpcAccount)
    );
}

export function getJellybeanMachineGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mallowJellybean',
    'J3LLYcm8V5hJRzCKENRPW3yGdQ6xU8Nie8jr3mU88eqq'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      version: number;
      authority: PublicKey;
      mintAuthority: PublicKey;
      feeAccounts: Array<FeeAccountArgs>;
      printFeeConfig: OptionOrNullable<PrintFeeConfigArgs>;
      itemsLoaded: number;
      supplyLoaded: number | bigint;
      supplyRedeemed: number | bigint;
      state: JellybeanStateArgs;
      uri: string;
      padding: Uint8Array;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      version: [8, u8()],
      authority: [9, publicKeySerializer()],
      mintAuthority: [41, publicKeySerializer()],
      feeAccounts: [73, array(getFeeAccountSerializer())],
      printFeeConfig: [null, option(getPrintFeeConfigSerializer())],
      itemsLoaded: [null, u8()],
      supplyLoaded: [null, u64()],
      supplyRedeemed: [null, u64()],
      state: [null, getJellybeanStateSerializer()],
      uri: [null, string()],
      padding: [null, bytes({ size: 320 })],
    })
    .deserializeUsing<JellybeanMachine>((account) =>
      deserializeJellybeanMachine(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([240, 170, 43, 148, 110, 172, 77, 89])
    );
}
