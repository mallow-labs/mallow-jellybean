/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';

export type Counter = Account<CounterAccountData>;

export type CounterAccountData = {
  discriminator: Uint8Array;
  authority: PublicKey;
  count: bigint;
};

export type CounterAccountDataArgs = {
  authority: PublicKey;
  count: number | bigint;
};

export function getCounterAccountDataSerializer(): Serializer<
  CounterAccountDataArgs,
  CounterAccountData
> {
  return mapSerializer<CounterAccountDataArgs, any, CounterAccountData>(
    struct<CounterAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['count', u64()],
      ],
      { description: 'CounterAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([255, 176, 4, 245, 188, 253, 124, 25]),
    })
  ) as Serializer<CounterAccountDataArgs, CounterAccountData>;
}

export function deserializeCounter(rawAccount: RpcAccount): Counter {
  return deserializeAccount(rawAccount, getCounterAccountDataSerializer());
}

export async function fetchCounter(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Counter> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Counter');
  return deserializeCounter(maybeAccount);
}

export async function safeFetchCounter(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Counter | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeCounter(maybeAccount) : null;
}

export async function fetchAllCounter(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Counter[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Counter');
    return deserializeCounter(maybeAccount);
  });
}

export async function safeFetchAllCounter(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Counter[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCounter(maybeAccount as RpcAccount));
}

export function getCounterGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mallowJellybean',
    'DNdkMr221bX2kviVo3kzQfuoqSR9uxqipfK2yHa9WHJw'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      count: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      count: [40, u64()],
    })
    .deserializeUsing<Counter>((account) => deserializeCounter(account))
    .whereField(
      'discriminator',
      new Uint8Array([255, 176, 4, 245, 188, 253, 124, 25])
    );
}

export function getCounterSize(): number {
  return 48;
}
