//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct AddCoreItem {
    /// Gumball Machine account.
    pub jellybean_machine: solana_program::pubkey::Pubkey,

    pub authority_pda: solana_program::pubkey::Pubkey,
    /// Authority of the jellybean machine.
    pub authority: solana_program::pubkey::Pubkey,
    /// Payer for account reallocation
    pub payer: solana_program::pubkey::Pubkey,

    pub asset: Option<solana_program::pubkey::Pubkey>,
    /// Core asset's collection if it's part of one.
    pub collection: Option<solana_program::pubkey::Pubkey>,

    pub mpl_core_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl AddCoreItem {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.jellybean_machine,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        if let Some(asset) = self.asset {
            accounts.push(solana_program::instruction::AccountMeta::new(asset, false));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MALLOW_JELLYBEAN_ID,
                false,
            ));
        }
        if let Some(collection) = self.collection {
            accounts.push(solana_program::instruction::AccountMeta::new(
                collection, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MALLOW_JELLYBEAN_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_core_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&AddCoreItemInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::MALLOW_JELLYBEAN_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddCoreItemInstructionData {
    discriminator: [u8; 8],
}

impl AddCoreItemInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [138, 200, 152, 167, 252, 149, 240, 114],
        }
    }
}

impl Default for AddCoreItemInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `AddCoreItem`.
///
/// ### Accounts:
///
///   0. `[writable]` jellybean_machine
///   1. `[writable]` authority_pda
///   2. `[writable, signer]` authority
///   3. `[writable, signer]` payer
///   4. `[writable, optional]` asset
///   5. `[writable, optional]` collection
///   6. `[optional]` mpl_core_program (default to `CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d`)
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct AddCoreItemBuilder {
    jellybean_machine: Option<solana_program::pubkey::Pubkey>,
    authority_pda: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    asset: Option<solana_program::pubkey::Pubkey>,
    collection: Option<solana_program::pubkey::Pubkey>,
    mpl_core_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AddCoreItemBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Gumball Machine account.
    #[inline(always)]
    pub fn jellybean_machine(
        &mut self,
        jellybean_machine: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.jellybean_machine = Some(jellybean_machine);
        self
    }
    #[inline(always)]
    pub fn authority_pda(&mut self, authority_pda: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority_pda = Some(authority_pda);
        self
    }
    /// Authority of the jellybean machine.
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Payer for account reallocation
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn asset(&mut self, asset: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.asset = asset;
        self
    }
    /// `[optional account]`
    /// Core asset's collection if it's part of one.
    #[inline(always)]
    pub fn collection(&mut self, collection: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.collection = collection;
        self
    }
    /// `[optional account, default to 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d']`
    #[inline(always)]
    pub fn mpl_core_program(
        &mut self,
        mpl_core_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.mpl_core_program = Some(mpl_core_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AddCoreItem {
            jellybean_machine: self
                .jellybean_machine
                .expect("jellybean_machine is not set"),
            authority_pda: self.authority_pda.expect("authority_pda is not set"),
            authority: self.authority.expect("authority is not set"),
            payer: self.payer.expect("payer is not set"),
            asset: self.asset,
            collection: self.collection,
            mpl_core_program: self.mpl_core_program.unwrap_or(solana_program::pubkey!(
                "CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `add_core_item` CPI accounts.
pub struct AddCoreItemCpiAccounts<'a, 'b> {
    /// Gumball Machine account.
    pub jellybean_machine: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority_pda: &'b solana_program::account_info::AccountInfo<'a>,
    /// Authority of the jellybean machine.
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer for account reallocation
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Core asset's collection if it's part of one.
    pub collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub mpl_core_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `add_core_item` CPI instruction.
pub struct AddCoreItemCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Gumball Machine account.
    pub jellybean_machine: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority_pda: &'b solana_program::account_info::AccountInfo<'a>,
    /// Authority of the jellybean machine.
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer for account reallocation
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Core asset's collection if it's part of one.
    pub collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub mpl_core_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> AddCoreItemCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AddCoreItemCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            jellybean_machine: accounts.jellybean_machine,
            authority_pda: accounts.authority_pda,
            authority: accounts.authority,
            payer: accounts.payer,
            asset: accounts.asset,
            collection: accounts.collection,
            mpl_core_program: accounts.mpl_core_program,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.jellybean_machine.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        if let Some(asset) = self.asset {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *asset.key, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MALLOW_JELLYBEAN_ID,
                false,
            ));
        }
        if let Some(collection) = self.collection {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *collection.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MALLOW_JELLYBEAN_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_core_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&AddCoreItemInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MALLOW_JELLYBEAN_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.jellybean_machine.clone());
        account_infos.push(self.authority_pda.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.payer.clone());
        if let Some(asset) = self.asset {
            account_infos.push(asset.clone());
        }
        if let Some(collection) = self.collection {
            account_infos.push(collection.clone());
        }
        account_infos.push(self.mpl_core_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AddCoreItem` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` jellybean_machine
///   1. `[writable]` authority_pda
///   2. `[writable, signer]` authority
///   3. `[writable, signer]` payer
///   4. `[writable, optional]` asset
///   5. `[writable, optional]` collection
///   6. `[]` mpl_core_program
///   7. `[]` system_program
#[derive(Clone, Debug)]
pub struct AddCoreItemCpiBuilder<'a, 'b> {
    instruction: Box<AddCoreItemCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AddCoreItemCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AddCoreItemCpiBuilderInstruction {
            __program: program,
            jellybean_machine: None,
            authority_pda: None,
            authority: None,
            payer: None,
            asset: None,
            collection: None,
            mpl_core_program: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Gumball Machine account.
    #[inline(always)]
    pub fn jellybean_machine(
        &mut self,
        jellybean_machine: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.jellybean_machine = Some(jellybean_machine);
        self
    }
    #[inline(always)]
    pub fn authority_pda(
        &mut self,
        authority_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority_pda = Some(authority_pda);
        self
    }
    /// Authority of the jellybean machine.
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Payer for account reallocation
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn asset(
        &mut self,
        asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.asset = asset;
        self
    }
    /// `[optional account]`
    /// Core asset's collection if it's part of one.
    #[inline(always)]
    pub fn collection(
        &mut self,
        collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.collection = collection;
        self
    }
    #[inline(always)]
    pub fn mpl_core_program(
        &mut self,
        mpl_core_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mpl_core_program = Some(mpl_core_program);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = AddCoreItemCpi {
            __program: self.instruction.__program,

            jellybean_machine: self
                .instruction
                .jellybean_machine
                .expect("jellybean_machine is not set"),

            authority_pda: self
                .instruction
                .authority_pda
                .expect("authority_pda is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            asset: self.instruction.asset,

            collection: self.instruction.collection,

            mpl_core_program: self
                .instruction
                .mpl_core_program
                .expect("mpl_core_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AddCoreItemCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    jellybean_machine: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mpl_core_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
